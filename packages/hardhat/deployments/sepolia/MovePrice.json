{
  "address": "0x1BC3c61EE9B8A48DaA11CAA64618D23A55a17425",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cornDex",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cornToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "size",
          "type": "int256"
        }
      ],
      "name": "movePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2d9c94e23977b231b95e868cc25650e7ee99a1b690020b32f933178d040674a4",
  "receipt": {
    "to": null,
    "from": "0x02cba1233c543a25669dBA2A00B1806F863288BB",
    "contractAddress": "0x1BC3c61EE9B8A48DaA11CAA64618D23A55a17425",
    "transactionIndex": 95,
    "gasUsed": "208457",
    "logsBloom": "0x
    "blockHash": "0x9189092e214171b48d52cdc12bbdac70193910d297fa0b1b3408b906fa5bfa4b",
    "transactionHash": "0x2d9c94e23977b231b95e868cc25650e7ee99a1b690020b32f933178d040674a4",
    "logs": [
      {
        "transactionIndex": 95,
        "blockNumber": 8275343,
        "transactionHash": "0x2d9c94e23977b231b95e868cc25650e7ee99a1b690020b32f933178d040674a4",
        "address": "0x8d922102c62D4834dB241fd47BF3846716266521",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000001bc3c61ee9b8a48daa11caa64618d23a55a17425",
          "0x00000000000000000000000032189da7867adfcb88d85e87011534cd2711dac9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 186,
        "blockHash": "0x9189092e214171b48d52cdc12bbdac70193910d297fa0b1b3408b906fa5bfa4b"
      }
    ],
    "blockNumber": 8275343,
    "cumulativeGasUsed": "11255605",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x32189Da7867ADFcb88D85e87011534cD2711dAc9",
    "0x8d922102c62D4834dB241fd47BF3846716266521"
  ],
  "numDeployments": 1,
  "solcInputHash": "eb13ecede4b07e7eccb412d806545708",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cornDex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cornToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"size\",\"type\":\"int256\"}],\"name\":\"movePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract acts as a whale account that moves the price of CORN up and down whenever anyone calls it\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MovePrice.sol\":\"MovePrice\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/CornDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Simple DEX contract that allows users to swap ETH for CORN and CORN for ETH\\n */\\ncontract CornDEX {\\n    /* ========== GLOBAL VARIABLES ========== */\\n\\n    IERC20 token; //instantiates the imported contract\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidity;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Swap(address swapper, address inputToken, uint256 inputAmount, address outputToken, uint256 outputAmount);\\n    event PriceUpdated(uint256 price);\\n    /**\\n     * @notice Emitted when liquidity provided to DEX and mints LPTs.\\n     */\\n    event LiquidityProvided(address liquidityProvider, uint256 liquidityMinted, uint256 ethInput, uint256 tokensInput);\\n\\n    /**\\n     * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\\n     */\\n    event LiquidityRemoved(\\n        address liquidityRemover,\\n        uint256 liquidityWithdrawn,\\n        uint256 tokensOutput,\\n        uint256 ethOutput\\n    );\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address tokenAddr) {\\n        token = IERC20(tokenAddr); //specifies the token address that will hook into the interface and be used through the variable 'token'\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and CORN.\\n     * @param tokens amount to be transferred to DEX\\n     * @return totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract\\n     * NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract.\\n     */\\n    function init(uint256 tokens) public payable returns (uint256) {\\n        require(totalLiquidity == 0, \\\"DEX: init - already has liquidity\\\");\\n        totalLiquidity = address(this).balance;\\n        liquidity[msg.sender] = totalLiquidity;\\n        require(token.transferFrom(msg.sender, address(this), tokens), \\\"DEX: init - transfer did not transact\\\");\\n        return totalLiquidity;\\n    }\\n\\n    /**\\n     * @notice returns the amount you should receive (yOutput) when given the reserves of both assets in the pool\\n     */\\n    function price(uint256 xInput, uint256 xReserves, uint256 yReserves) public pure returns (uint256 yOutput) {\\n        uint256 numerator = xInput * yReserves;\\n        uint256 denominator = (xReserves) + xInput;\\n        return (numerator / denominator);\\n    }\\n\\n    /**\\n     * @notice returns the current price of ETH in CORN\\n     */\\n    function currentPrice() public view returns (uint256 _currentPrice) {\\n        _currentPrice = price(1 ether, address(this).balance, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool\\n     */\\n    function calculateXInput(\\n        uint256 yOutput,\\n        uint256 xReserves,\\n        uint256 yReserves\\n    ) public pure returns (uint256 xInput) {\\n        uint256 numerator = yOutput * xReserves;\\n        uint256 denominator = yReserves - yOutput;\\n\\n        return (numerator / denominator) + 1;\\n    }\\n\\n    /**\\n     * @notice sends Ether to DEX in exchange for $CORN\\n     */\\n    function ethToToken() internal returns (uint256 tokenOutput) {\\n        require(msg.value > 0, \\\"cannot swap 0 ETH\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\\n\\n        require(token.transfer(msg.sender, tokenOutput), \\\"ethToToken(): reverted swap.\\\");\\n        emit Swap(msg.sender, address(0), msg.value, address(token), tokenOutput);\\n        return tokenOutput;\\n    }\\n\\n    /**\\n     * @notice sends $CORN tokens to DEX in exchange for Ether\\n     */\\n    function tokenToEth(uint256 tokenInput) internal returns (uint256 ethOutput) {\\n        require(tokenInput > 0, \\\"cannot swap 0 tokens\\\");\\n        require(token.balanceOf(msg.sender) >= tokenInput, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenInput, \\\"insufficient allowance\\\");\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        ethOutput = price(tokenInput, tokenReserve, address(this).balance);\\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \\\"tokenToEth(): reverted swap.\\\");\\n        (bool sent, ) = msg.sender.call{ value: ethOutput }(\\\"\\\");\\n        require(sent, \\\"tokenToEth: revert in transferring eth to you!\\\");\\n        emit Swap(msg.sender, address(token), tokenInput, address(0), ethOutput);\\n        return ethOutput;\\n    }\\n\\n    /**\\n     * @notice allows users to swap ETH for $CORN or $CORN for ETH with a single method\\n     */\\n    function swap(uint256 inputAmount) public payable returns (uint256 outputAmount) {\\n        if (msg.value > 0 && inputAmount == msg.value) {\\n            outputAmount = ethToToken();\\n        } else {\\n            outputAmount = tokenToEth(inputAmount);\\n        }\\n        emit PriceUpdated(currentPrice());\\n    }\\n\\n    /**\\n     * @notice allows deposits of $CORN and $ETH to liquidity pool\\n     * NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $CORN needed as well and taken from the depositor.\\n     * NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call.\\n     * NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\\n     */\\n    function deposit() public payable returns (uint256 tokensDeposited) {\\n        require(msg.value > 0, \\\"Must send value when depositing\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 tokenDeposit;\\n\\n        tokenDeposit = ((msg.value * tokenReserve) / ethReserve) + 1;\\n\\n        require(token.balanceOf(msg.sender) >= tokenDeposit, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenDeposit, \\\"insufficient allowance\\\");\\n\\n        uint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\\n        liquidity[msg.sender] += liquidityMinted;\\n        totalLiquidity += liquidityMinted;\\n\\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\\n        return tokenDeposit;\\n    }\\n\\n    /**\\n     * @notice allows withdrawal of $CORN and $ETH from liquidity pool\\n     * NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI.\\n     */\\n    function withdraw(uint256 amount) public returns (uint256 ethAmount, uint256 tokenAmount) {\\n        require(liquidity[msg.sender] >= amount, \\\"withdraw: sender does not have enough liquidity to withdraw.\\\");\\n        uint256 ethReserve = address(this).balance;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethWithdrawn;\\n\\n        ethWithdrawn = (amount * ethReserve) / totalLiquidity;\\n\\n        tokenAmount = (amount * tokenReserve) / totalLiquidity;\\n        liquidity[msg.sender] -= amount;\\n        totalLiquidity -= amount;\\n        (bool sent, ) = payable(msg.sender).call{ value: ethWithdrawn }(\\\"\\\");\\n        require(sent, \\\"withdraw(): revert in transferring eth to you!\\\");\\n        require(token.transfer(msg.sender, tokenAmount));\\n        emit LiquidityRemoved(msg.sender, amount, tokenAmount, ethWithdrawn);\\n        return (ethWithdrawn, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x5a3ac036d8480dc68a834ce1e97ba6369bb6bf810afa3070c2b0e2347ab6f2c2\",\"license\":\"MIT\"},\"contracts/MovePrice.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./CornDEX.sol\\\";\\n\\n/**\\n * @notice This contract acts as a whale account that moves the price of CORN up and down whenever anyone calls it\\n */\\ncontract MovePrice {\\n    CornDEX cornDex;\\n\\n    constructor(address _cornDex, address _cornToken) {\\n        cornDex = CornDEX(_cornDex);\\n        // Approve the cornDEX to use the cornToken\\n        IERC20(_cornToken).approve(address(cornDex), type(uint256).max);\\n    }\\n\\n    function movePrice(int256 size) public {\\n        if (size > 0) {\\n            cornDex.swap{ value: uint256(size) }(uint256(size));\\n        } else {\\n            cornDex.swap(uint256(-size));\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x7f79b5ec0dc73ea13c047a927ea94448468f1ceb3cccfc2a6127546dd1539920\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161031838038061031883398101604081905261002f916100df565b600080546001600160a01b0319166001600160a01b0384811691821790925560405163095ea7b360e01b8152600481019190915260001960248201529082169063095ea7b3906044016020604051808303816000875af1158015610097573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bb9190610112565b50505061013b565b80516001600160a01b03811681146100da57600080fd5b919050565b600080604083850312156100f257600080fd5b6100fb836100c3565b9150610109602084016100c3565b90509250929050565b60006020828403121561012457600080fd5b8151801515811461013457600080fd5b9392505050565b6101ce8061014a6000396000f3fe60806040526004361061001f5760003560e01c8063d226b4ed1461002857005b3661002657005b005b34801561003457600080fd5b5061002661004336600461013c565b60008113156100c157600054604051634a5c8c6f60e11b8152600481018390526001600160a01b03909116906394b918de90839060240160206040518083038185885af1158015610098573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906100bd9190610155565b5050565b6000546001600160a01b03166394b918de6100db8361016e565b6040518263ffffffff1660e01b81526004016100f991815260200190565b6020604051808303816000875af1158015610118573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bd9190610155565b60006020828403121561014e57600080fd5b5035919050565b60006020828403121561016757600080fd5b5051919050565b6000600160ff1b820161019157634e487b7160e01b600052601160045260246000fd5b506000039056fea2646970667358221220a419d4aa3940770739d25ba60e8197849ce057aa906c9b0f04faad89b11a3bb964736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061001f5760003560e01c8063d226b4ed1461002857005b3661002657005b005b34801561003457600080fd5b5061002661004336600461013c565b60008113156100c157600054604051634a5c8c6f60e11b8152600481018390526001600160a01b03909116906394b918de90839060240160206040518083038185885af1158015610098573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906100bd9190610155565b5050565b6000546001600160a01b03166394b918de6100db8361016e565b6040518263ffffffff1660e01b81526004016100f991815260200190565b6020604051808303816000875af1158015610118573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bd9190610155565b60006020828403121561014e57600080fd5b5035919050565b60006020828403121561016757600080fd5b5051919050565b6000600160ff1b820161019157634e487b7160e01b600052601160045260246000fd5b506000039056fea2646970667358221220a419d4aa3940770739d25ba60e8197849ce057aa906c9b0f04faad89b11a3bb964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract acts as a whale account that moves the price of CORN up and down whenever anyone calls it",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1880,
        "contract": "contracts/MovePrice.sol:MovePrice",
        "label": "cornDex",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(CornDEX)1693"
      }
    ],
    "types": {
      "t_contract(CornDEX)1693": {
        "encoding": "inplace",
        "label": "contract CornDEX",
        "numberOfBytes": "20"
      }
    }
  }
}