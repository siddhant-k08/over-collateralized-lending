{
  "address": "0x32189Da7867ADFcb88D85e87011534cD2711dAc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethInput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensInput",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityRemover",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensOutput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethOutput",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "yOutput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xReserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yReserves",
          "type": "uint256"
        }
      ],
      "name": "calculateXInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xInput",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_currentPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensDeposited",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "xInput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xReserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yReserves",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fa0532a87c872d2503dd11857c8ea43f143261e90dd6c4b325ac0c58c415001",
  "receipt": {
    "to": null,
    "from": "0x02cba1233c543a25669dBA2A00B1806F863288BB",
    "contractAddress": "0x32189Da7867ADFcb88D85e87011534cD2711dAc9",
    "transactionIndex": 71,
    "gasUsed": "1082529",
    "logsBloom": "0x
    "blockHash": "0x5dd1931611fac2705d8a4b87c63b874b97e9b5b33056b4e6464e4518e97014b6",
    "transactionHash": "0x2fa0532a87c872d2503dd11857c8ea43f143261e90dd6c4b325ac0c58c415001",
    "logs": [],
    "blockNumber": 8275341,
    "cumulativeGasUsed": "10425109",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8d922102c62D4834dB241fd47BF3846716266521"
  ],
  "numDeployments": 1,
  "solcInputHash": "eb13ecede4b07e7eccb412d806545708",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethInput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensInput\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityRemover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethOutput\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yReserves\",\"type\":\"uint256\"}],\"name\":\"calculateXInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xInput\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensDeposited\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yReserves\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"init(uint256)\":{\"params\":{\"tokens\":\"amount to be transferred to DEX\"},\"returns\":{\"_0\":\"totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LiquidityProvided(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity provided to DEX and mints LPTs.\"},\"LiquidityRemoved(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity removed from DEX and decreases LPT count within DEX.\"}},\"kind\":\"user\",\"methods\":{\"calculateXInput(uint256,uint256,uint256)\":{\"notice\":\"returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool\"},\"currentPrice()\":{\"notice\":\"returns the current price of ETH in CORN\"},\"deposit()\":{\"notice\":\"allows deposits of $CORN and $ETH to liquidity pool NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $CORN needed as well and taken from the depositor. NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call. NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\"},\"init(uint256)\":{\"notice\":\"initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and CORN.\"},\"price(uint256,uint256,uint256)\":{\"notice\":\"returns the amount you should receive (yOutput) when given the reserves of both assets in the pool\"},\"swap(uint256)\":{\"notice\":\"allows users to swap ETH for $CORN or $CORN for ETH with a single method\"},\"withdraw(uint256)\":{\"notice\":\"allows withdrawal of $CORN and $ETH from liquidity pool NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI.\"}},\"notice\":\"Simple DEX contract that allows users to swap ETH for CORN and CORN for ETH\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CornDEX.sol\":\"CornDEX\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/CornDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Simple DEX contract that allows users to swap ETH for CORN and CORN for ETH\\n */\\ncontract CornDEX {\\n    /* ========== GLOBAL VARIABLES ========== */\\n\\n    IERC20 token; //instantiates the imported contract\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidity;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Swap(address swapper, address inputToken, uint256 inputAmount, address outputToken, uint256 outputAmount);\\n    event PriceUpdated(uint256 price);\\n    /**\\n     * @notice Emitted when liquidity provided to DEX and mints LPTs.\\n     */\\n    event LiquidityProvided(address liquidityProvider, uint256 liquidityMinted, uint256 ethInput, uint256 tokensInput);\\n\\n    /**\\n     * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\\n     */\\n    event LiquidityRemoved(\\n        address liquidityRemover,\\n        uint256 liquidityWithdrawn,\\n        uint256 tokensOutput,\\n        uint256 ethOutput\\n    );\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address tokenAddr) {\\n        token = IERC20(tokenAddr); //specifies the token address that will hook into the interface and be used through the variable 'token'\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and CORN.\\n     * @param tokens amount to be transferred to DEX\\n     * @return totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract\\n     * NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract.\\n     */\\n    function init(uint256 tokens) public payable returns (uint256) {\\n        require(totalLiquidity == 0, \\\"DEX: init - already has liquidity\\\");\\n        totalLiquidity = address(this).balance;\\n        liquidity[msg.sender] = totalLiquidity;\\n        require(token.transferFrom(msg.sender, address(this), tokens), \\\"DEX: init - transfer did not transact\\\");\\n        return totalLiquidity;\\n    }\\n\\n    /**\\n     * @notice returns the amount you should receive (yOutput) when given the reserves of both assets in the pool\\n     */\\n    function price(uint256 xInput, uint256 xReserves, uint256 yReserves) public pure returns (uint256 yOutput) {\\n        uint256 numerator = xInput * yReserves;\\n        uint256 denominator = (xReserves) + xInput;\\n        return (numerator / denominator);\\n    }\\n\\n    /**\\n     * @notice returns the current price of ETH in CORN\\n     */\\n    function currentPrice() public view returns (uint256 _currentPrice) {\\n        _currentPrice = price(1 ether, address(this).balance, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool\\n     */\\n    function calculateXInput(\\n        uint256 yOutput,\\n        uint256 xReserves,\\n        uint256 yReserves\\n    ) public pure returns (uint256 xInput) {\\n        uint256 numerator = yOutput * xReserves;\\n        uint256 denominator = yReserves - yOutput;\\n\\n        return (numerator / denominator) + 1;\\n    }\\n\\n    /**\\n     * @notice sends Ether to DEX in exchange for $CORN\\n     */\\n    function ethToToken() internal returns (uint256 tokenOutput) {\\n        require(msg.value > 0, \\\"cannot swap 0 ETH\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\\n\\n        require(token.transfer(msg.sender, tokenOutput), \\\"ethToToken(): reverted swap.\\\");\\n        emit Swap(msg.sender, address(0), msg.value, address(token), tokenOutput);\\n        return tokenOutput;\\n    }\\n\\n    /**\\n     * @notice sends $CORN tokens to DEX in exchange for Ether\\n     */\\n    function tokenToEth(uint256 tokenInput) internal returns (uint256 ethOutput) {\\n        require(tokenInput > 0, \\\"cannot swap 0 tokens\\\");\\n        require(token.balanceOf(msg.sender) >= tokenInput, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenInput, \\\"insufficient allowance\\\");\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        ethOutput = price(tokenInput, tokenReserve, address(this).balance);\\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \\\"tokenToEth(): reverted swap.\\\");\\n        (bool sent, ) = msg.sender.call{ value: ethOutput }(\\\"\\\");\\n        require(sent, \\\"tokenToEth: revert in transferring eth to you!\\\");\\n        emit Swap(msg.sender, address(token), tokenInput, address(0), ethOutput);\\n        return ethOutput;\\n    }\\n\\n    /**\\n     * @notice allows users to swap ETH for $CORN or $CORN for ETH with a single method\\n     */\\n    function swap(uint256 inputAmount) public payable returns (uint256 outputAmount) {\\n        if (msg.value > 0 && inputAmount == msg.value) {\\n            outputAmount = ethToToken();\\n        } else {\\n            outputAmount = tokenToEth(inputAmount);\\n        }\\n        emit PriceUpdated(currentPrice());\\n    }\\n\\n    /**\\n     * @notice allows deposits of $CORN and $ETH to liquidity pool\\n     * NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $CORN needed as well and taken from the depositor.\\n     * NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call.\\n     * NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\\n     */\\n    function deposit() public payable returns (uint256 tokensDeposited) {\\n        require(msg.value > 0, \\\"Must send value when depositing\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 tokenDeposit;\\n\\n        tokenDeposit = ((msg.value * tokenReserve) / ethReserve) + 1;\\n\\n        require(token.balanceOf(msg.sender) >= tokenDeposit, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenDeposit, \\\"insufficient allowance\\\");\\n\\n        uint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\\n        liquidity[msg.sender] += liquidityMinted;\\n        totalLiquidity += liquidityMinted;\\n\\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\\n        return tokenDeposit;\\n    }\\n\\n    /**\\n     * @notice allows withdrawal of $CORN and $ETH from liquidity pool\\n     * NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI.\\n     */\\n    function withdraw(uint256 amount) public returns (uint256 ethAmount, uint256 tokenAmount) {\\n        require(liquidity[msg.sender] >= amount, \\\"withdraw: sender does not have enough liquidity to withdraw.\\\");\\n        uint256 ethReserve = address(this).balance;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethWithdrawn;\\n\\n        ethWithdrawn = (amount * ethReserve) / totalLiquidity;\\n\\n        tokenAmount = (amount * tokenReserve) / totalLiquidity;\\n        liquidity[msg.sender] -= amount;\\n        totalLiquidity -= amount;\\n        (bool sent, ) = payable(msg.sender).call{ value: ethWithdrawn }(\\\"\\\");\\n        require(sent, \\\"withdraw(): revert in transferring eth to you!\\\");\\n        require(token.transfer(msg.sender, tokenAmount));\\n        emit LiquidityRemoved(msg.sender, amount, tokenAmount, ethWithdrawn);\\n        return (ethWithdrawn, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x5a3ac036d8480dc68a834ce1e97ba6369bb6bf810afa3070c2b0e2347ab6f2c2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516112c13803806112c183398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61122e806100936000396000f3fe6080604052600436106100865760003560e01c806394b918de1161005957806394b918de146101295780639d1b464a1461013c578063b7b0422d14610151578063b8c876b114610164578063d0e30db01461019157600080fd5b806315770f921461008b5780632071a9f4146100b45780632e1a7d4d146100d45780636e97f13914610109575b600080fd5b34801561009757600080fd5b506100a160015481565b6040519081526020015b60405180910390f35b3480156100c057600080fd5b506100a16100cf3660046110cd565b610199565b3480156100e057600080fd5b506100f46100ef3660046110f9565b6101ca565b604080519283526020830191909152016100ab565b34801561011557600080fd5b506100a16101243660046110cd565b6104be565b6100a16101373660046110f9565b6104f0565b34801561014857600080fd5b506100a161055f565b6100a161015f3660046110f9565b6105df565b34801561017057600080fd5b506100a161017f366004611112565b60026020526000908152604090205481565b6100a1610733565b6000806101a68386611158565b905060006101b48686611175565b90506101c08183611188565b9695505050505050565b3360009081526002602052604081205481908311156102565760405162461bcd60e51b815260206004820152603c60248201527f77697468647261773a2073656e64657220646f6573206e6f742068617665206560448201527f6e6f756768206c697175696469747920746f2077697468647261772e0000000060648201526084015b60405180910390fd5b600080546040516370a0823160e01b81523060048201524792916001600160a01b0316906370a0823190602401602060405180830381865afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c491906111aa565b9050600060015483876102d79190611158565b6102e19190611188565b6001549091506102f18388611158565b6102fb9190611188565b3360009081526002602052604081208054929650889290919061031f9084906111c3565b92505081905550856001600082825461033891906111c3565b9091555050604051600090339083908381818185875af1925050503d806000811461037f576040519150601f19603f3d011682016040523d82523d6000602084013e610384565b606091505b50509050806103ec5760405162461bcd60e51b815260206004820152602e60248201527f776974686472617728293a2072657665727420696e207472616e73666572726960448201526d6e672065746820746f20796f752160901b606482015260840161024d565b60005460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561043d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046191906111d6565b61046a57600080fd5b6040805133815260208101899052908101869052606081018390527f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060800160405180910390a181955050505050915091565b6000806104cb8486611158565b905060006104d986856111c3565b90506104e58183611188565b6101c0906001611175565b6000803411801561050057503482145b156105145761050d610acd565b9050610520565b61051d82610cbe565b90505b7f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe061054961055f565b60405190815260200160405180910390a1919050565b600080546040516370a0823160e01b81523060048201526105da91670de0b6b3a76400009147916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cf91906111aa565b905090565b600060015460001461063d5760405162461bcd60e51b815260206004820152602160248201527f4445583a20696e6974202d20616c726561647920686173206c697175696469746044820152607960f81b606482015260840161024d565b47600181905533600081815260026020526040808220939093555491516323b872dd60e01b81526004810191909152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d191906111d6565b61072b5760405162461bcd60e51b815260206004820152602560248201527f4445583a20696e6974202d207472616e7366657220646964206e6f74207472616044820152641b9cd858dd60da1b606482015260840161024d565b505060015490565b60008034116107845760405162461bcd60e51b815260206004820152601f60248201527f4d7573742073656e642076616c7565207768656e206465706f736974696e6700604482015260640161024d565b600061079034476111c3565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080291906111aa565b90506000826108118334611158565b61081b9190611188565b610826906001611175565b6000546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089791906111aa565b10156108e55760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640161024d565b600054604051636eb1769f60e11b815233600482015230602482015282916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095791906111aa565b101561099e5760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e7420616c6c6f77616e636560501b604482015260640161024d565b600083600154346109af9190611158565b6109b99190611188565b336000908152600260205260408120805492935083929091906109dd908490611175565b9250508190555080600160008282546109f69190611175565b90915550506000546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7691906111d6565b610a7f57600080fd5b604080513381526020810183905234818301526060810184905290517f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f5009181900360800190a1509392505050565b6000803411610b125760405162461bcd60e51b81526020600482015260116024820152700c6c2dcdcdee840e6eec2e04060408aa89607b1b604482015260640161024d565b6000610b1e34476111c3565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9091906111aa565b9050610b9d348383610199565b60005460405163a9059cbb60e01b8152336004820152602481018390529194506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1391906111d6565b610c5f5760405162461bcd60e51b815260206004820152601c60248201527f657468546f546f6b656e28293a20726576657274656420737761702e00000000604482015260640161024d565b6000805460408051338152602081019390935234908301526001600160a01b03166060820152608081018490527f5380cf97d8f645d3c4896da60c053458dca03a3a31cec642ac80e1ddf0d8d02a9060a00160405180910390a1505090565b6000808211610d065760405162461bcd60e51b815260206004820152601460248201527363616e6e6f742073776170203020746f6b656e7360601b604482015260640161024d565b6000546040516370a0823160e01b815233600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7291906111aa565b1015610dc05760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640161024d565b600054604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3291906111aa565b1015610e795760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e7420616c6c6f77616e636560501b604482015260640161024d565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee691906111aa565b9050610ef3838247610199565b6000546040516323b872dd60e01b8152336004820152306024820152604481018690529193506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6f91906111d6565b610fbb5760405162461bcd60e51b815260206004820152601c60248201527f746f6b656e546f45746828293a20726576657274656420737761702e00000000604482015260640161024d565b604051600090339084908381818185875af1925050503d8060008114610ffd576040519150601f19603f3d011682016040523d82523d6000602084013e611002565b606091505b505090508061106a5760405162461bcd60e51b815260206004820152602e60248201527f746f6b656e546f4574683a2072657665727420696e207472616e73666572726960448201526d6e672065746820746f20796f752160901b606482015260840161024d565b60008054604080513381526001600160a01b03909216602083015281018690526060810191909152608081018490527f5380cf97d8f645d3c4896da60c053458dca03a3a31cec642ac80e1ddf0d8d02a9060a00160405180910390a15050919050565b6000806000606084860312156110e257600080fd5b505081359360208301359350604090920135919050565b60006020828403121561110b57600080fd5b5035919050565b60006020828403121561112457600080fd5b81356001600160a01b038116811461113b57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761116f5761116f611142565b92915050565b8082018082111561116f5761116f611142565b6000826111a557634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111bc57600080fd5b5051919050565b8181038181111561116f5761116f611142565b6000602082840312156111e857600080fd5b8151801515811461113b57600080fdfea2646970667358221220c996810201880c3b04e20b3439dbdd485cdd16e973a794a647e4f37cca7becf164736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806394b918de1161005957806394b918de146101295780639d1b464a1461013c578063b7b0422d14610151578063b8c876b114610164578063d0e30db01461019157600080fd5b806315770f921461008b5780632071a9f4146100b45780632e1a7d4d146100d45780636e97f13914610109575b600080fd5b34801561009757600080fd5b506100a160015481565b6040519081526020015b60405180910390f35b3480156100c057600080fd5b506100a16100cf3660046110cd565b610199565b3480156100e057600080fd5b506100f46100ef3660046110f9565b6101ca565b604080519283526020830191909152016100ab565b34801561011557600080fd5b506100a16101243660046110cd565b6104be565b6100a16101373660046110f9565b6104f0565b34801561014857600080fd5b506100a161055f565b6100a161015f3660046110f9565b6105df565b34801561017057600080fd5b506100a161017f366004611112565b60026020526000908152604090205481565b6100a1610733565b6000806101a68386611158565b905060006101b48686611175565b90506101c08183611188565b9695505050505050565b3360009081526002602052604081205481908311156102565760405162461bcd60e51b815260206004820152603c60248201527f77697468647261773a2073656e64657220646f6573206e6f742068617665206560448201527f6e6f756768206c697175696469747920746f2077697468647261772e0000000060648201526084015b60405180910390fd5b600080546040516370a0823160e01b81523060048201524792916001600160a01b0316906370a0823190602401602060405180830381865afa1580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c491906111aa565b9050600060015483876102d79190611158565b6102e19190611188565b6001549091506102f18388611158565b6102fb9190611188565b3360009081526002602052604081208054929650889290919061031f9084906111c3565b92505081905550856001600082825461033891906111c3565b9091555050604051600090339083908381818185875af1925050503d806000811461037f576040519150601f19603f3d011682016040523d82523d6000602084013e610384565b606091505b50509050806103ec5760405162461bcd60e51b815260206004820152602e60248201527f776974686472617728293a2072657665727420696e207472616e73666572726960448201526d6e672065746820746f20796f752160901b606482015260840161024d565b60005460405163a9059cbb60e01b8152336004820152602481018790526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561043d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046191906111d6565b61046a57600080fd5b6040805133815260208101899052908101869052606081018390527f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060800160405180910390a181955050505050915091565b6000806104cb8486611158565b905060006104d986856111c3565b90506104e58183611188565b6101c0906001611175565b6000803411801561050057503482145b156105145761050d610acd565b9050610520565b61051d82610cbe565b90505b7f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe061054961055f565b60405190815260200160405180910390a1919050565b600080546040516370a0823160e01b81523060048201526105da91670de0b6b3a76400009147916001600160a01b0316906370a0823190602401602060405180830381865afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cf91906111aa565b905090565b600060015460001461063d5760405162461bcd60e51b815260206004820152602160248201527f4445583a20696e6974202d20616c726561647920686173206c697175696469746044820152607960f81b606482015260840161024d565b47600181905533600081815260026020526040808220939093555491516323b872dd60e01b81526004810191909152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d191906111d6565b61072b5760405162461bcd60e51b815260206004820152602560248201527f4445583a20696e6974202d207472616e7366657220646964206e6f74207472616044820152641b9cd858dd60da1b606482015260840161024d565b505060015490565b60008034116107845760405162461bcd60e51b815260206004820152601f60248201527f4d7573742073656e642076616c7565207768656e206465706f736974696e6700604482015260640161024d565b600061079034476111c3565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156107de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080291906111aa565b90506000826108118334611158565b61081b9190611188565b610826906001611175565b6000546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089791906111aa565b10156108e55760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640161024d565b600054604051636eb1769f60e11b815233600482015230602482015282916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095791906111aa565b101561099e5760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e7420616c6c6f77616e636560501b604482015260640161024d565b600083600154346109af9190611158565b6109b99190611188565b336000908152600260205260408120805492935083929091906109dd908490611175565b9250508190555080600160008282546109f69190611175565b90915550506000546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7691906111d6565b610a7f57600080fd5b604080513381526020810183905234818301526060810184905290517f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f5009181900360800190a1509392505050565b6000803411610b125760405162461bcd60e51b81526020600482015260116024820152700c6c2dcdcdee840e6eec2e04060408aa89607b1b604482015260640161024d565b6000610b1e34476111c3565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9091906111aa565b9050610b9d348383610199565b60005460405163a9059cbb60e01b8152336004820152602481018390529194506001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1391906111d6565b610c5f5760405162461bcd60e51b815260206004820152601c60248201527f657468546f546f6b656e28293a20726576657274656420737761702e00000000604482015260640161024d565b6000805460408051338152602081019390935234908301526001600160a01b03166060820152608081018490527f5380cf97d8f645d3c4896da60c053458dca03a3a31cec642ac80e1ddf0d8d02a9060a00160405180910390a1505090565b6000808211610d065760405162461bcd60e51b815260206004820152601460248201527363616e6e6f742073776170203020746f6b656e7360601b604482015260640161024d565b6000546040516370a0823160e01b815233600482015283916001600160a01b0316906370a0823190602401602060405180830381865afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7291906111aa565b1015610dc05760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e7420746f6b656e2062616c616e6365000000000000604482015260640161024d565b600054604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e90604401602060405180830381865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3291906111aa565b1015610e795760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e7420616c6c6f77616e636560501b604482015260640161024d565b600080546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee691906111aa565b9050610ef3838247610199565b6000546040516323b872dd60e01b8152336004820152306024820152604481018690529193506001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6f91906111d6565b610fbb5760405162461bcd60e51b815260206004820152601c60248201527f746f6b656e546f45746828293a20726576657274656420737761702e00000000604482015260640161024d565b604051600090339084908381818185875af1925050503d8060008114610ffd576040519150601f19603f3d011682016040523d82523d6000602084013e611002565b606091505b505090508061106a5760405162461bcd60e51b815260206004820152602e60248201527f746f6b656e546f4574683a2072657665727420696e207472616e73666572726960448201526d6e672065746820746f20796f752160901b606482015260840161024d565b60008054604080513381526001600160a01b03909216602083015281018690526060810191909152608081018490527f5380cf97d8f645d3c4896da60c053458dca03a3a31cec642ac80e1ddf0d8d02a9060a00160405180910390a15050919050565b6000806000606084860312156110e257600080fd5b505081359360208301359350604090920135919050565b60006020828403121561110b57600080fd5b5035919050565b60006020828403121561112457600080fd5b81356001600160a01b038116811461113b57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761116f5761116f611142565b92915050565b8082018082111561116f5761116f611142565b6000826111a557634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111bc57600080fd5b5051919050565b8181038181111561116f5761116f611142565b6000602082840312156111e857600080fd5b8151801515811461113b57600080fdfea2646970667358221220c996810201880c3b04e20b3439dbdd485cdd16e973a794a647e4f37cca7becf164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "init(uint256)": {
        "params": {
          "tokens": "amount to be transferred to DEX"
        },
        "returns": {
          "_0": "totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidityProvided(address,uint256,uint256,uint256)": {
        "notice": "Emitted when liquidity provided to DEX and mints LPTs."
      },
      "LiquidityRemoved(address,uint256,uint256,uint256)": {
        "notice": "Emitted when liquidity removed from DEX and decreases LPT count within DEX."
      }
    },
    "kind": "user",
    "methods": {
      "calculateXInput(uint256,uint256,uint256)": {
        "notice": "returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool"
      },
      "currentPrice()": {
        "notice": "returns the current price of ETH in CORN"
      },
      "deposit()": {
        "notice": "allows deposits of $CORN and $ETH to liquidity pool NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $CORN needed as well and taken from the depositor. NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call. NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM."
      },
      "init(uint256)": {
        "notice": "initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and CORN."
      },
      "price(uint256,uint256,uint256)": {
        "notice": "returns the amount you should receive (yOutput) when given the reserves of both assets in the pool"
      },
      "swap(uint256)": {
        "notice": "allows users to swap ETH for $CORN or $CORN for ETH with a single method"
      },
      "withdraw(uint256)": {
        "notice": "allows withdrawal of $CORN and $ETH from liquidity pool NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI."
      }
    },
    "notice": "Simple DEX contract that allows users to swap ETH for CORN and CORN for ETH",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1048,
        "contract": "contracts/CornDEX.sol:CornDEX",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)877"
      },
      {
        "astId": 1050,
        "contract": "contracts/CornDEX.sol:CornDEX",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1054,
        "contract": "contracts/CornDEX.sol:CornDEX",
        "label": "liquidity",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)877": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}