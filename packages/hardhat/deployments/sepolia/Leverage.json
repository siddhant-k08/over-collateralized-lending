{
  "address": "0xCD9EbF01C0DB302De23F4696D8c1a24FcF0C1b73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lending",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cornDEX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_corn",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loops",
          "type": "uint256"
        }
      ],
      "name": "LeveragedPositionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loops",
          "type": "uint256"
        }
      ],
      "name": "LeveragedPositionOpened",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeLeveragedPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reserve",
          "type": "uint256"
        }
      ],
      "name": "openLeveragedPosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdfb82911e7d7d5e9bcfb5324575d9987328e60c9eefd75365e495fa9ba5e90a4",
  "receipt": {
    "to": null,
    "from": "0x02cba1233c543a25669dBA2A00B1806F863288BB",
    "contractAddress": "0xCD9EbF01C0DB302De23F4696D8c1a24FcF0C1b73",
    "transactionIndex": 119,
    "gasUsed": "692906",
    "logsBloom": "0x00000400000000000000000000000000000000000000000000000000000000000000000010000000000000000000100000000000000000000040000000200008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000800000000000000000000000000000000024000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbb10abd4ddb48c5e605249873a5f5de099f9675bfc884394ba59f201e761cb20",
    "transactionHash": "0xdfb82911e7d7d5e9bcfb5324575d9987328e60c9eefd75365e495fa9ba5e90a4",
    "logs": [
      {
        "transactionIndex": 119,
        "blockNumber": 8310829,
        "transactionHash": "0xdfb82911e7d7d5e9bcfb5324575d9987328e60c9eefd75365e495fa9ba5e90a4",
        "address": "0x8d922102c62D4834dB241fd47BF3846716266521",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000cd9ebf01c0db302de23f4696d8c1a24fcf0c1b73",
          "0x00000000000000000000000032189da7867adfcb88d85e87011534cd2711dac9"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 233,
        "blockHash": "0xbb10abd4ddb48c5e605249873a5f5de099f9675bfc884394ba59f201e761cb20"
      }
    ],
    "blockNumber": 8310829,
    "cumulativeGasUsed": "14890189",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD67da5833fAA6ccdcC98F8F4F9F56c58d4D59A98",
    "0x32189Da7867ADFcb88D85e87011534cD2711dAc9",
    "0x8d922102c62D4834dB241fd47BF3846716266521"
  ],
  "numDeployments": 2,
  "solcInputHash": "bab8e6a2b1536de41ece576111f36f07",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lending\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cornDEX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_corn\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loops\",\"type\":\"uint256\"}],\"name\":\"LeveragedPositionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loops\",\"type\":\"uint256\"}],\"name\":\"LeveragedPositionOpened\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLeveragedPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"name\":\"openLeveragedPosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"openLeveragedPosition(uint256)\":{\"params\":{\"reserve\":\"The amount of ETH that we will keep in the contract as a reserve to prevent liquidation\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Claim ownership of the contract so that no one else can change your position or withdraw your funds\"},\"openLeveragedPosition(uint256)\":{\"notice\":\"Open a leveraged position, recursively borrowing CORN, swapping it for ETH, and adding it as collateral\"},\"withdraw()\":{\"notice\":\"Withdraw the ETH from the contract\"}},\"notice\":\"This contract is used to leverage a user's position by borrowing CORN from the Lending contract then borrowing more CORN from the DEX to repay the initial borrow then repeating until the user has borrowed as much as they want\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Leverage.sol\":\"Leverage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Corn.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror Corn__InvalidAmount();\\nerror Corn__InsufficientBalance();\\nerror Corn__InsufficientAllowance();\\nerror Corn__InvalidAddress();\\n\\ncontract Corn is ERC20, Ownable {\\n    constructor() ERC20(\\\"CORN\\\", \\\"CORN\\\") Ownable(msg.sender) {}\\n\\n    function burnFrom(address account, uint256 amount) external onlyOwner returns (bool) {\\n        uint256 balance = balanceOf(account);\\n        if (amount == 0) {\\n            revert Corn__InvalidAmount();\\n        }\\n        if (balance < amount) {\\n            revert Corn__InsufficientBalance();\\n        }\\n        _burn(account, amount);\\n        return true;\\n    }\\n\\n    function mintTo(address to, uint256 amount) external onlyOwner returns (bool) {\\n        if (to == address(0)) {\\n            revert Corn__InvalidAddress();\\n        }\\n        if (amount == 0) {\\n            revert Corn__InvalidAmount();\\n        }\\n        _mint(to, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xdf8c3ab2690644eafe9dfbe86a6d80e2c75937102219f9f3d84279f62b9e89b8\",\"license\":\"UNLICENSED\"},\"contracts/CornDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @notice Simple DEX contract that allows users to swap ETH for CORN and CORN for ETH\\n */\\ncontract CornDEX {\\n    /* ========== GLOBAL VARIABLES ========== */\\n\\n    IERC20 token; //instantiates the imported contract\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidity;\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Swap(address swapper, address inputToken, uint256 inputAmount, address outputToken, uint256 outputAmount);\\n    event PriceUpdated(uint256 price);\\n    /**\\n     * @notice Emitted when liquidity provided to DEX and mints LPTs.\\n     */\\n    event LiquidityProvided(address liquidityProvider, uint256 liquidityMinted, uint256 ethInput, uint256 tokensInput);\\n\\n    /**\\n     * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\\n     */\\n    event LiquidityRemoved(\\n        address liquidityRemover,\\n        uint256 liquidityWithdrawn,\\n        uint256 tokensOutput,\\n        uint256 ethOutput\\n    );\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address tokenAddr) {\\n        token = IERC20(tokenAddr); //specifies the token address that will hook into the interface and be used through the variable 'token'\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * @notice initializes amount of tokens that will be transferred to the DEX itself from the erc20 contract. Loads contract up with both ETH and CORN.\\n     * @param tokens amount to be transferred to DEX\\n     * @return totalLiquidity is the number of LPTs minting as a result of deposits made to DEX contract\\n     * NOTE: since ratio is 1:1, this is fine to initialize the totalLiquidity as equal to eth balance of contract.\\n     */\\n    function init(uint256 tokens) public payable returns (uint256) {\\n        require(totalLiquidity == 0, \\\"DEX: init - already has liquidity\\\");\\n        totalLiquidity = address(this).balance;\\n        liquidity[msg.sender] = totalLiquidity;\\n        require(token.transferFrom(msg.sender, address(this), tokens), \\\"DEX: init - transfer did not transact\\\");\\n        return totalLiquidity;\\n    }\\n\\n    /**\\n     * @notice returns the amount you should receive (yOutput) when given the reserves of both assets in the pool\\n     */\\n    function price(uint256 xInput, uint256 xReserves, uint256 yReserves) public pure returns (uint256 yOutput) {\\n        uint256 numerator = xInput * yReserves;\\n        uint256 denominator = (xReserves) + xInput;\\n        return (numerator / denominator);\\n    }\\n\\n    /**\\n     * @notice returns the current price of ETH in CORN\\n     */\\n    function currentPrice() public view returns (uint256 _currentPrice) {\\n        _currentPrice = price(1 ether, address(this).balance, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice returns the amount you need to put in (xInput) when given the amount of yOutput you want along with the reserves of both assets in the pool\\n     */\\n    function calculateXInput(\\n        uint256 yOutput,\\n        uint256 xReserves,\\n        uint256 yReserves\\n    ) public pure returns (uint256 xInput) {\\n        uint256 numerator = yOutput * xReserves;\\n        uint256 denominator = yReserves - yOutput;\\n\\n        return (numerator / denominator) + 1;\\n    }\\n\\n    /**\\n     * @notice sends Ether to DEX in exchange for $CORN\\n     */\\n    function ethToToken() internal returns (uint256 tokenOutput) {\\n        require(msg.value > 0, \\\"cannot swap 0 ETH\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        tokenOutput = price(msg.value, ethReserve, tokenReserve);\\n\\n        require(token.transfer(msg.sender, tokenOutput), \\\"ethToToken(): reverted swap.\\\");\\n        emit Swap(msg.sender, address(0), msg.value, address(token), tokenOutput);\\n        return tokenOutput;\\n    }\\n\\n    /**\\n     * @notice sends $CORN tokens to DEX in exchange for Ether\\n     */\\n    function tokenToEth(uint256 tokenInput) internal returns (uint256 ethOutput) {\\n        require(tokenInput > 0, \\\"cannot swap 0 tokens\\\");\\n        require(token.balanceOf(msg.sender) >= tokenInput, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenInput, \\\"insufficient allowance\\\");\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        ethOutput = price(tokenInput, tokenReserve, address(this).balance);\\n        require(token.transferFrom(msg.sender, address(this), tokenInput), \\\"tokenToEth(): reverted swap.\\\");\\n        (bool sent, ) = msg.sender.call{ value: ethOutput }(\\\"\\\");\\n        require(sent, \\\"tokenToEth: revert in transferring eth to you!\\\");\\n        emit Swap(msg.sender, address(token), tokenInput, address(0), ethOutput);\\n        return ethOutput;\\n    }\\n\\n    /**\\n     * @notice allows users to swap ETH for $CORN or $CORN for ETH with a single method\\n     */\\n    function swap(uint256 inputAmount) public payable returns (uint256 outputAmount) {\\n        if (msg.value > 0 && inputAmount == msg.value) {\\n            outputAmount = ethToToken();\\n        } else {\\n            outputAmount = tokenToEth(inputAmount);\\n        }\\n        emit PriceUpdated(currentPrice());\\n    }\\n\\n    /**\\n     * @notice allows deposits of $CORN and $ETH to liquidity pool\\n     * NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $CORN needed as well and taken from the depositor.\\n     * NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call.\\n     * NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\\n     */\\n    function deposit() public payable returns (uint256 tokensDeposited) {\\n        require(msg.value > 0, \\\"Must send value when depositing\\\");\\n        uint256 ethReserve = address(this).balance - msg.value;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 tokenDeposit;\\n\\n        tokenDeposit = ((msg.value * tokenReserve) / ethReserve) + 1;\\n\\n        require(token.balanceOf(msg.sender) >= tokenDeposit, \\\"insufficient token balance\\\");\\n        require(token.allowance(msg.sender, address(this)) >= tokenDeposit, \\\"insufficient allowance\\\");\\n\\n        uint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\\n        liquidity[msg.sender] += liquidityMinted;\\n        totalLiquidity += liquidityMinted;\\n\\n        require(token.transferFrom(msg.sender, address(this), tokenDeposit));\\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenDeposit);\\n        return tokenDeposit;\\n    }\\n\\n    /**\\n     * @notice allows withdrawal of $CORN and $ETH from liquidity pool\\n     * NOTE: with this current code, the msg caller could end up getting very little back if the liquidity is super low in the pool. I guess they could see that with the UI.\\n     */\\n    function withdraw(uint256 amount) public returns (uint256 ethAmount, uint256 tokenAmount) {\\n        require(liquidity[msg.sender] >= amount, \\\"withdraw: sender does not have enough liquidity to withdraw.\\\");\\n        uint256 ethReserve = address(this).balance;\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        uint256 ethWithdrawn;\\n\\n        ethWithdrawn = (amount * ethReserve) / totalLiquidity;\\n\\n        tokenAmount = (amount * tokenReserve) / totalLiquidity;\\n        liquidity[msg.sender] -= amount;\\n        totalLiquidity -= amount;\\n        (bool sent, ) = payable(msg.sender).call{ value: ethWithdrawn }(\\\"\\\");\\n        require(sent, \\\"withdraw(): revert in transferring eth to you!\\\");\\n        require(token.transfer(msg.sender, tokenAmount));\\n        emit LiquidityRemoved(msg.sender, amount, tokenAmount, ethWithdrawn);\\n        return (ethWithdrawn, tokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x5a3ac036d8480dc68a834ce1e97ba6369bb6bf810afa3070c2b0e2347ab6f2c2\",\"license\":\"MIT\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Corn.sol\\\";\\nimport \\\"./CornDEX.sol\\\";\\n\\nerror Lending__InvalidAmount();\\nerror Lending__TransferFailed();\\nerror Lending__UnsafePositionRatio();\\nerror Lending__BorrowingFailed();\\nerror Lending__RepayingFailed();\\nerror Lending__PositionSafe();\\nerror Lending__NotLiquidatable();\\nerror Lending__InsufficientLiquidatorCorn();\\n\\ncontract Lending is Ownable {\\n    uint256 private constant COLLATERAL_RATIO = 120; // 120% collateralization required\\n    uint256 private constant LIQUIDATOR_REWARD = 10; // 10% reward for liquidators\\n\\n    Corn private i_corn;\\n    CornDEX private i_cornDEX;\\n\\n    mapping(address => uint256) public s_userCollateral; // User's collateral balance\\n    mapping(address => uint256) public s_userBorrowed; // User's borrowed corn balance\\n\\n    event CollateralAdded(address indexed user, uint256 indexed amount, uint256 price);\\n    event CollateralWithdrawn(address indexed user, uint256 indexed amount, uint256 price);\\n    event AssetBorrowed(address indexed user, uint256 indexed amount, uint256 price);\\n    event AssetRepaid(address indexed user, uint256 indexed amount, uint256 price);\\n    event Liquidation(\\n        address indexed user,\\n        address indexed liquidator,\\n        uint256 amountForLiquidator,\\n        uint256 liquidatedUserDebt,\\n        uint256 price\\n    );\\n\\n    constructor(address _cornDEX, address _corn) Ownable(msg.sender) {\\n        i_cornDEX = CornDEX(_cornDEX);\\n        i_corn = Corn(_corn);\\n    }\\n\\n    /**\\n     * @notice Allows users to add collateral to their account\\n     */\\n    function addCollateral() public payable {\\n        if(msg.value == 0) {\\n            revert Lending__InvalidAmount();\\n        }\\n        s_userCollateral[msg.sender] += msg.value;\\n        emit CollateralAdded(msg.sender, msg.value, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n     * @notice Allows users to withdraw collateral as long as it doesn't make them liquidatable\\n     * @param amount The amount of collateral to withdraw\\n     */\\n    function withdrawCollateral(uint256 amount) public {\\n        if(amount == 0 || s_userCollateral[msg.sender] < amount){\\n            revert Lending__InvalidAmount();\\n        }\\n        if(s_userBorrowed[msg.sender] != 0){\\n            _validatePosition(msg.sender);\\n        }\\n\\n        uint256 newCollateral = s_userCollateral[msg.sender] - amount;\\n        s_userCollateral[msg.sender] = newCollateral;\\n\\n        payable(msg.sender).transfer(amount);\\n\\n        emit CollateralWithdrawn(msg.sender, amount, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n     * @notice Calculates the total collateral value for a user based on their collateral balance\\n     * @param user The address of the user to calculate the collateral value for\\n     * @return uint256 The collateral value\\n     */\\n    function calculateCollateralValue(address user) public view returns (uint256) {\\n        uint256 collateralAmount = s_userCollateral[user];\\n        return (collateralAmount * i_cornDEX.currentPrice()) / 1e18;\\n    }\\n\\n    /**\\n     * @notice Calculates the position ratio for a user to ensure they are within safe limits\\n     * @param user The address of the user to calculate the position ratio for\\n     * @return uint256 The position ratio\\n     */\\n    function _calculatePositionRatio(address user) internal view returns (uint256) {\\n        uint borrowedAmount = s_userBorrowed[user];\\n        uint collateralValue = calculateCollateralValue(user);\\n        if (borrowedAmount == 0) return type(uint256).max;\\n        return (collateralValue * 1e18) / borrowedAmount;\\n    }\\n\\n    /**\\n     * @notice Checks if a user's position can be liquidated\\n     * @param user The address of the user to check\\n     * @return bool True if the position is liquidatable, false otherwise\\n     */\\n    function isLiquidatable(address user) public view returns (bool) {\\n        uint256 positionRatio = _calculatePositionRatio(user);\\n        return (positionRatio * 100) < COLLATERAL_RATIO * 1e18;\\n    }\\n\\n    /**\\n     * @notice Internal view method that reverts if a user's position is unsafe\\n     * @param user The address of the user to validate\\n     */\\n    function _validatePosition(address user) internal view {\\n        if (isLiquidatable(user)) {\\n            revert Lending__UnsafePositionRatio();\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows users to borrow corn based on their collateral\\n     * @param borrowAmount The amount of corn to borrow\\n     */\\n    function borrowCorn(uint256 borrowAmount) public {\\n        if(borrowAmount == 0){\\n            revert Lending__InvalidAmount();\\n        }\\n\\n        s_userBorrowed[msg.sender] += borrowAmount;\\n        _validatePosition(msg.sender);\\n        bool success = i_corn.mintTo(msg.sender, borrowAmount);\\n        if(!success){\\n            revert Lending__BorrowingFailed();\\n        }\\n\\n        emit AssetBorrowed(msg.sender, borrowAmount, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n     * @notice Allows users to repay corn and reduce their debt\\n     * @param repayAmount The amount of corn to repay\\n     */\\n    function repayCorn(uint256 repayAmount) public {\\n        if(repayAmount > s_userBorrowed[msg.sender] || repayAmount ==0){\\n            revert Lending__InvalidAmount();\\n        }\\n\\n        s_userBorrowed[msg.sender] -= repayAmount;\\n        bool success = i_corn.burnFrom(msg.sender, repayAmount);\\n        if(!success){\\n            revert Lending__RepayingFailed();\\n        }\\n\\n        emit AssetRepaid(msg.sender, repayAmount, i_cornDEX.currentPrice());\\n    }\\n\\n    /**\\n     * @notice Allows liquidators to liquidate unsafe positions\\n     * @param user The address of the user to liquidate\\n     * @dev The caller must have enough CORN to pay back user's debt\\n     * @dev The caller must have approved this contract to transfer the debt\\n     */\\n    function liquidate(address user) public {\\n        if (!isLiquidatable(user)) {\\n            revert Lending__NotLiquidatable(); // Revert if position is not liquidatable\\n        }\\n\\n        uint256 userDebt = s_userBorrowed[user]; // Get user's borrowed amount\\n\\n        if (i_corn.balanceOf(msg.sender) < userDebt) {\\n            revert Lending__InsufficientLiquidatorCorn();\\n        }\\n\\n        uint256 userCollateral = s_userCollateral[user]; // Get user's collateral balance\\n        uint256 collateralValue = calculateCollateralValue(user); // Calculate user's collateral value\\n\\n        // transfer value of debt to the contract\\n        i_corn.transferFrom(msg.sender, address(this), userDebt);\\n\\n        // burn the transferred corn\\n        i_corn.burnFrom(address(this), userDebt);\\n\\n        // Clear user's debt\\n        s_userBorrowed[user] = 0;\\n\\n        // calculate collateral to purchase (maintain the ratio of debt to collateral value)\\n        uint256 collateralPurchased = (userDebt * userCollateral) / collateralValue;\\n        uint256 liquidatorReward = (collateralPurchased * LIQUIDATOR_REWARD) / 100;\\n        uint256 amountForLiquidator = collateralPurchased + liquidatorReward;\\n        amountForLiquidator = amountForLiquidator > userCollateral ? userCollateral : amountForLiquidator; // Ensure we don't exceed user's collateral\\n\\n        s_userCollateral[user] = userCollateral - amountForLiquidator;\\n\\n        // transfer 110% of the collateral needed to cover the debt to the liquidator\\n        (bool sent,) = payable(msg.sender).call{ value: amountForLiquidator }(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\n        emit Liquidation(user, msg.sender, amountForLiquidator, userDebt, i_cornDEX.currentPrice());\\n    }\\n\\n    function flashLoan(IFlashLoanRecipient _recipient, uint256 _amount, address _extraParam) public {\\n        // Send the loan to the recipient \\n        i_corn.mintTo(address(_recipient), _amount);\\n\\n        // Execute the operation - It should return the loan back to this contract\\n        bool success = _recipient.executeOperation(_amount, msg.sender, _extraParam);\\n        require(success, \\\"Operation was successful\\\");\\n\\n        // Burn the loan - Should revert if it doesn't have enough\\n        i_corn.burnFrom(address(this), _amount);\\n    }\\n\\n    function getMaxBorrowAmount(uint256 ethCollateralAmount) public view returns(uint256){\\n        if(ethCollateralAmount == 0) return 0;\\n\\n        // Calculate collateral value in CORN terms\\n        uint256 collateralValue = (ethCollateralAmount * i_cornDEX.currentPrice()) / 1e18;\\n\\n        // Calculate max borrow amount while maintaining the required collateral ratio\\n        return (collateralValue * 100) / COLLATERAL_RATIO;\\n    }\\n\\n    function getMaxWithdrawableCollateral(address user) public view returns(uint256){\\n        uint256 borrowedAmount = s_userBorrowed[user];\\n        uint256 userCollateral = s_userCollateral[user];\\n\\n        uint256 maxBorrowedAmount = getMaxBorrowAmount(userCollateral);\\n        if(borrowedAmount == maxBorrowedAmount) return 0;\\n\\n        uint256 potentialBorrowingAmount = maxBorrowedAmount - borrowedAmount;\\n        uint256 ethValueOfPotenialBorrowingAmount = (potentialBorrowingAmount * 1e18) / i_cornDEX.currentPrice();\\n\\n        return (ethValueOfPotenialBorrowingAmount * COLLATERAL_RATIO) / 100;\\n    }\\n}\\n\\ninterface IFlashLoanRecipient{\\n    function executeOperation(uint256 amount, address initiator, address extraParam) external returns(bool);\\n}\",\"keccak256\":\"0x9c370204c9d03cda633d1cc92ccf436b3df627ce63202cf24fba5a1d987aec19\",\"license\":\"UNLICENSED\"},\"contracts/Leverage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport { Lending } from \\\"./Lending.sol\\\";\\r\\nimport { CornDEX } from \\\"./CornDEX.sol\\\";\\r\\nimport { Corn } from \\\"./Corn.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice This contract is used to leverage a user's position by borrowing CORN from the Lending contract\\r\\n * then borrowing more CORN from the DEX to repay the initial borrow then repeating until the user has borrowed as much as they want\\r\\n */\\r\\n\\r\\ncontract Leverage{\\r\\n    Lending i_lending;\\r\\n    CornDEX i_cornDEX;\\r\\n    Corn i_corn;\\r\\n    address public owner;\\r\\n\\r\\n    event LeveragedPositionOpened(address user, uint256 loops);\\r\\n    event LeveragedPositionClosed(address user, uint256 loops);\\r\\n\\r\\n    modifier onlyOwner(){\\r\\n        require(msg.sender == owner, \\\"Only the owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _lending, address _cornDEX, address _corn){\\r\\n        i_lending = Lending(_lending);\\r\\n        i_cornDEX = CornDEX(_cornDEX);\\r\\n        i_corn = Corn(_corn);\\r\\n        // Approve the DEX to spend the user's CORN\\r\\n        i_corn.approve(address(i_cornDEX), type(uint256).max);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice Claim ownership of the contract so that no one else can change your position or withdraw your funds\\r\\n    */\\r\\n    function claimOwnership() public {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Open a leveraged position, recursively borrowing CORN, swapping it for ETH, and adding it as collateral\\r\\n     * @param reserve The amount of ETH that we will keep in the contract as a reserve to prevent liquidation\\r\\n     */\\r\\n    function openLeveragedPosition(uint256 reserve) public payable onlyOwner {\\r\\n        uint256 loops = 0;\\r\\n        while (true) {\\r\\n            uint256 balance = address(this).balance;\\r\\n            i_lending.addCollateral{value: balance}();\\r\\n            if (balance <= reserve) {\\r\\n                break;\\r\\n            }\\r\\n            uint256 maxBorrowAmount = i_lending.getMaxBorrowAmount(balance);\\r\\n            i_lending.borrowCorn(maxBorrowAmount);\\r\\n            \\r\\n            i_cornDEX.swap(maxBorrowAmount);\\r\\n            loops++;\\r\\n        }\\r\\n        emit LeveragedPositionOpened(msg.sender, loops);\\r\\n    }\\r\\n\\r\\n    function closeLeveragedPosition() public onlyOwner {\\r\\n        uint256 loops = 0;\\r\\n        while (true) {\\r\\n            uint256 maxWithdrawable = i_lending.getMaxWithdrawableCollateral(address(this));\\r\\n            i_lending.withdrawCollateral(maxWithdrawable);\\r\\n            require(maxWithdrawable == address(this).balance, \\\"maxWithdrawable is not equal to balance\\\");\\r\\n            i_cornDEX.swap{value:maxWithdrawable}(maxWithdrawable);\\r\\n            uint256 cornBalance = i_corn.balanceOf(address(this));\\r\\n            uint256 amountToRepay = cornBalance > i_lending.s_userBorrowed(address(this)) ? i_lending.s_userBorrowed(address(this)) : cornBalance;\\r\\n            if (amountToRepay > 0) {\\r\\n                i_lending.repayCorn(amountToRepay);\\r\\n            } else {\\r\\n                // Swap the remaining CORN to ETH since we don't want CORN exposure\\r\\n                i_cornDEX.swap(i_corn.balanceOf(address(this)));\\r\\n                break;\\r\\n            }\\r\\n            loops++;\\r\\n        }\\r\\n        emit LeveragedPositionClosed(msg.sender, loops);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw the ETH from the contract\\r\\n     */\\r\\n    function withdraw() public onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No balance to withdraw\\\");\\r\\n        (bool success, ) = payable(msg.sender).call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\",\"keccak256\":\"0x4673f73639c26d6c525ac57ec597c89ba923964df85f66ebaa5eec75e8a28a36\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b35380380610b3583398101604081905261002f916100fb565b600080546001600160a01b038581166001600160a01b0319928316179092556001805485841690831681179091556002805493851693909216831790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af11580156100b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d6919061013e565b50505050610167565b80516001600160a01b03811681146100f657600080fd5b919050565b60008060006060848603121561011057600080fd5b610119846100df565b9250610127602085016100df565b9150610135604085016100df565b90509250925092565b60006020828403121561015057600080fd5b8151801515811461016057600080fd5b9392505050565b6109bf806101766000396000f3fe60806040526004361061004e5760003560e01c806319adbcf11461005a5780633ccfd60b146100715780634e71e0c8146100865780635d35fd1d146100aa5780638da5cb5b146100bd57600080fd5b3661005557005b600080fd5b34801561006657600080fd5b5061006f6100f9565b005b34801561007d57600080fd5b5061006f6105c0565b34801561009257600080fd5b5061006f600380546001600160a01b03191633179055565b61006f6100b83660046108eb565b6106c4565b3480156100c957600080fd5b506003546100dd906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6003546001600160a01b0316331461012c5760405162461bcd60e51b815260040161012390610904565b60405180910390fd5b60005b600080546040516324842b9960e21b81523060048201526001600160a01b0390911690639210ae6490602401602060405180830381865afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c9190610949565b6000546040516330897f1760e11b8152600481018390529192506001600160a01b031690636112fe2e90602401600060405180830381600087803b1580156101e357600080fd5b505af11580156101f7573d6000803e3d6000fd5b5050505047811461025a5760405162461bcd60e51b815260206004820152602760248201527f6d6178576974686472617761626c65206973206e6f7420657175616c20746f2060448201526662616c616e636560c81b6064820152608401610123565b600154604051634a5c8c6f60e11b8152600481018390526001600160a01b03909116906394b918de90839060240160206040518083038185885af11580156102a6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102cb9190610949565b506002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190610949565b60008054604051632a5f2c2360e01b815230600482015292935090916001600160a01b0390911690632a5f2c2390602401602060405180830381865afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab9190610949565b82116103b75781610423565b600054604051632a5f2c2360e01b81523060048201526001600160a01b0390911690632a5f2c2390602401602060405180830381865afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610949565b9050801561048e57600054604051636b3c2cc560e11b8152600481018390526001600160a01b039091169063d678598a90602401600060405180830381600087803b15801561047157600080fd5b505af1158015610485573d6000803e3d6000fd5b5050505061056f565b6001546002546040516370a0823160e01b81523060048201526001600160a01b03928316926394b918de9216906370a0823190602401602060405180830381865afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190610949565b6040518263ffffffff1660e01b815260040161052391815260200190565b6020604051808303816000875af1158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190610949565b50505050610584565b8361057981610962565b94505050505061012f565b60408051338152602081018390527fd7efb8fa81d5b6f15413f20428a60e0a70f6be8cd6f2bc98f3e95e7d69e75a12910160405180910390a150565b6003546001600160a01b031633146105ea5760405162461bcd60e51b815260040161012390610904565b47806106315760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606401610123565b604051600090339083908381818185875af1925050503d8060008114610673576040519150601f19603f3d011682016040523d82523d6000602084013e610678565b606091505b50509050806106c05760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610123565b5050565b6003546001600160a01b031633146106ee5760405162461bcd60e51b815260040161012390610904565b60005b6000805460408051639e81699960e01b8152905147936001600160a01b0390931692639e8169999285926004808301939282900301818588803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b505050505082811161075d57506108ae565b600080546040516361a4d4ef60e01b8152600481018490526001600160a01b03909116906361a4d4ef90602401602060405180830381865afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190610949565b600054604051636aef22d360e11b8152600481018390529192506001600160a01b03169063d5de45a690602401600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b5050600154604051634a5c8c6f60e11b8152600481018590526001600160a01b0390911692506394b918de91506024016020604051808303816000875af1158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190610949565b50826108a481610962565b93505050506106f1565b60408051338152602081018390527fd181fe027f31a66850cb9f3ded8b33ab1a90bbb391935d4d9fd26090dac11a25910160405180910390a15050565b6000602082840312156108fd57600080fd5b5035919050565b60208082526025908201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60408201526431ba34b7b760d91b606082015260800190565b60006020828403121561095b57600080fd5b5051919050565b60006001820161098257634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220cdfd20de44715cd3fc4319e9b06fdff1964dd9aea6f9245d56d27b9a863c597864736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c806319adbcf11461005a5780633ccfd60b146100715780634e71e0c8146100865780635d35fd1d146100aa5780638da5cb5b146100bd57600080fd5b3661005557005b600080fd5b34801561006657600080fd5b5061006f6100f9565b005b34801561007d57600080fd5b5061006f6105c0565b34801561009257600080fd5b5061006f600380546001600160a01b03191633179055565b61006f6100b83660046108eb565b6106c4565b3480156100c957600080fd5b506003546100dd906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6003546001600160a01b0316331461012c5760405162461bcd60e51b815260040161012390610904565b60405180910390fd5b60005b600080546040516324842b9960e21b81523060048201526001600160a01b0390911690639210ae6490602401602060405180830381865afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c9190610949565b6000546040516330897f1760e11b8152600481018390529192506001600160a01b031690636112fe2e90602401600060405180830381600087803b1580156101e357600080fd5b505af11580156101f7573d6000803e3d6000fd5b5050505047811461025a5760405162461bcd60e51b815260206004820152602760248201527f6d6178576974686472617761626c65206973206e6f7420657175616c20746f2060448201526662616c616e636560c81b6064820152608401610123565b600154604051634a5c8c6f60e11b8152600481018390526001600160a01b03909116906394b918de90839060240160206040518083038185885af11580156102a6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102cb9190610949565b506002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610315573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103399190610949565b60008054604051632a5f2c2360e01b815230600482015292935090916001600160a01b0390911690632a5f2c2390602401602060405180830381865afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab9190610949565b82116103b75781610423565b600054604051632a5f2c2360e01b81523060048201526001600160a01b0390911690632a5f2c2390602401602060405180830381865afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610949565b9050801561048e57600054604051636b3c2cc560e11b8152600481018390526001600160a01b039091169063d678598a90602401600060405180830381600087803b15801561047157600080fd5b505af1158015610485573d6000803e3d6000fd5b5050505061056f565b6001546002546040516370a0823160e01b81523060048201526001600160a01b03928316926394b918de9216906370a0823190602401602060405180830381865afa1580156104e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105059190610949565b6040518263ffffffff1660e01b815260040161052391815260200190565b6020604051808303816000875af1158015610542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105669190610949565b50505050610584565b8361057981610962565b94505050505061012f565b60408051338152602081018390527fd7efb8fa81d5b6f15413f20428a60e0a70f6be8cd6f2bc98f3e95e7d69e75a12910160405180910390a150565b6003546001600160a01b031633146105ea5760405162461bcd60e51b815260040161012390610904565b47806106315760405162461bcd60e51b81526020600482015260166024820152754e6f2062616c616e636520746f20776974686472617760501b6044820152606401610123565b604051600090339083908381818185875af1925050503d8060008114610673576040519150601f19603f3d011682016040523d82523d6000602084013e610678565b606091505b50509050806106c05760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610123565b5050565b6003546001600160a01b031633146106ee5760405162461bcd60e51b815260040161012390610904565b60005b6000805460408051639e81699960e01b8152905147936001600160a01b0390931692639e8169999285926004808301939282900301818588803b15801561073757600080fd5b505af115801561074b573d6000803e3d6000fd5b505050505082811161075d57506108ae565b600080546040516361a4d4ef60e01b8152600481018490526001600160a01b03909116906361a4d4ef90602401602060405180830381865afa1580156107a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cb9190610949565b600054604051636aef22d360e11b8152600481018390529192506001600160a01b03169063d5de45a690602401600060405180830381600087803b15801561081257600080fd5b505af1158015610826573d6000803e3d6000fd5b5050600154604051634a5c8c6f60e11b8152600481018590526001600160a01b0390911692506394b918de91506024016020604051808303816000875af1158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190610949565b50826108a481610962565b93505050506106f1565b60408051338152602081018390527fd181fe027f31a66850cb9f3ded8b33ab1a90bbb391935d4d9fd26090dac11a25910160405180910390a15050565b6000602082840312156108fd57600080fd5b5035919050565b60208082526025908201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60408201526431ba34b7b760d91b606082015260800190565b60006020828403121561095b57600080fd5b5051919050565b60006001820161098257634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220cdfd20de44715cd3fc4319e9b06fdff1964dd9aea6f9245d56d27b9a863c597864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "openLeveragedPosition(uint256)": {
        "params": {
          "reserve": "The amount of ETH that we will keep in the contract as a reserve to prevent liquidation"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Claim ownership of the contract so that no one else can change your position or withdraw your funds"
      },
      "openLeveragedPosition(uint256)": {
        "notice": "Open a leveraged position, recursively borrowing CORN, swapping it for ETH, and adding it as collateral"
      },
      "withdraw()": {
        "notice": "Withdraw the ETH from the contract"
      }
    },
    "notice": "This contract is used to leverage a user's position by borrowing CORN from the Lending contract then borrowing more CORN from the DEX to repay the initial borrow then repeating until the user has borrowed as much as they want",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2415,
        "contract": "contracts/Leverage.sol:Leverage",
        "label": "i_lending",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Lending)2391"
      },
      {
        "astId": 2418,
        "contract": "contracts/Leverage.sol:Leverage",
        "label": "i_cornDEX",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(CornDEX)1693"
      },
      {
        "astId": 2421,
        "contract": "contracts/Leverage.sol:Leverage",
        "label": "i_corn",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Corn)1041"
      },
      {
        "astId": 2423,
        "contract": "contracts/Leverage.sol:Leverage",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Corn)1041": {
        "encoding": "inplace",
        "label": "contract Corn",
        "numberOfBytes": "20"
      },
      "t_contract(CornDEX)1693": {
        "encoding": "inplace",
        "label": "contract CornDEX",
        "numberOfBytes": "20"
      },
      "t_contract(Lending)2391": {
        "encoding": "inplace",
        "label": "contract Lending",
        "numberOfBytes": "20"
      }
    }
  }
}